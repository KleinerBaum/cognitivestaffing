"""Auto-generated RecruitingWizard schema metadata.

This file is generated by ``scripts/propagate_schema.py``.
Do not edit manually.
"""
# CS_SCHEMA_PROPAGATE | PIPE_PROP
from __future__ import annotations

from dataclasses import dataclass
from typing import Final, Literal


@dataclass(frozen=True, slots=True)
class WizardFieldInfo:
    """Metadata for a canonical RecruitingWizard field."""

    path: str
    python_type: str
    is_collection: bool


WIZARD_FIELDS: Final[tuple[WizardFieldInfo, ...]] = (
    WizardFieldInfo(path="benefits.bonus", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="benefits.currency", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="benefits.equity", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="benefits.on_call", python_type="core.schema.OnCallRequirement", is_collection=False),
    WizardFieldInfo(path="benefits.perks", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="benefits.relocation_support", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="benefits.salary_range", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="benefits.wellbeing", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="company.headquarters", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="company.industries", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="company.legal_name", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="company.locations", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="company.mission", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="company.name", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="company.tagline", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="company.values", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="company.website", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="department.function", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="department.leader_name", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="department.leader_title", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="department.name", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="department.strategic_goals", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="interview_process.decision_timeline", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="interview_process.evaluation_criteria", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="interview_process.interviewers", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="interview_process.notes", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="interview_process.steps", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="missing_fields.root", python_type="dict[str, core.schema.MissingFieldEntry]", is_collection=False),
    WizardFieldInfo(path="role.employment_type", python_type="core.schema.EmploymentType", is_collection=False),
    WizardFieldInfo(path="role.on_call", python_type="core.schema.OnCallRequirement", is_collection=False),
    WizardFieldInfo(path="role.outcomes", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="role.purpose", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="role.reports_to", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="role.seniority", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="role.title", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="role.work_location", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="role.work_model", python_type="core.schema.WorkModel", is_collection=False),
    WizardFieldInfo(path="skills.certifications", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="skills.languages", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="skills.must_have", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="skills.nice_to_have", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="skills.tools", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="sources.root", python_type="dict[str, core.schema.SourceAttribution]", is_collection=False),
    WizardFieldInfo(path="summary.culture_highlights", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="summary.headline", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="summary.next_steps", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="summary.value_proposition", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="tasks.core", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="tasks.secondary", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="tasks.success_metrics", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="team.collaboration_tools", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="team.headcount_current", python_type="int | None", is_collection=False),
    WizardFieldInfo(path="team.headcount_target", python_type="int | None", is_collection=False),
    WizardFieldInfo(path="team.locations", python_type="list[str]", is_collection=True),
    WizardFieldInfo(path="team.mission", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="team.name", python_type="str | None", is_collection=False),
    WizardFieldInfo(path="team.reporting_line", python_type="str | None", is_collection=False),
)

WizardField = Literal[
    "benefits.bonus",
    "benefits.currency",
    "benefits.equity",
    "benefits.on_call",
    "benefits.perks",
    "benefits.relocation_support",
    "benefits.salary_range",
    "benefits.wellbeing",
    "company.headquarters",
    "company.industries",
    "company.legal_name",
    "company.locations",
    "company.mission",
    "company.name",
    "company.tagline",
    "company.values",
    "company.website",
    "department.function",
    "department.leader_name",
    "department.leader_title",
    "department.name",
    "department.strategic_goals",
    "interview_process.decision_timeline",
    "interview_process.evaluation_criteria",
    "interview_process.interviewers",
    "interview_process.notes",
    "interview_process.steps",
    "missing_fields.root",
    "role.employment_type",
    "role.on_call",
    "role.outcomes",
    "role.purpose",
    "role.reports_to",
    "role.seniority",
    "role.title",
    "role.work_location",
    "role.work_model",
    "skills.certifications",
    "skills.languages",
    "skills.must_have",
    "skills.nice_to_have",
    "skills.tools",
    "sources.root",
    "summary.culture_highlights",
    "summary.headline",
    "summary.next_steps",
    "summary.value_proposition",
    "tasks.core",
    "tasks.secondary",
    "tasks.success_metrics",
    "team.collaboration_tools",
    "team.headcount_current",
    "team.headcount_target",
    "team.locations",
    "team.mission",
    "team.name",
    "team.reporting_line",
]

WIZARD_FIELD_PATHS: Final[tuple[WizardField, ...]] = (
    "benefits.bonus",
    "benefits.currency",
    "benefits.equity",
    "benefits.on_call",
    "benefits.perks",
    "benefits.relocation_support",
    "benefits.salary_range",
    "benefits.wellbeing",
    "company.headquarters",
    "company.industries",
    "company.legal_name",
    "company.locations",
    "company.mission",
    "company.name",
    "company.tagline",
    "company.values",
    "company.website",
    "department.function",
    "department.leader_name",
    "department.leader_title",
    "department.name",
    "department.strategic_goals",
    "interview_process.decision_timeline",
    "interview_process.evaluation_criteria",
    "interview_process.interviewers",
    "interview_process.notes",
    "interview_process.steps",
    "missing_fields.root",
    "role.employment_type",
    "role.on_call",
    "role.outcomes",
    "role.purpose",
    "role.reports_to",
    "role.seniority",
    "role.title",
    "role.work_location",
    "role.work_model",
    "skills.certifications",
    "skills.languages",
    "skills.must_have",
    "skills.nice_to_have",
    "skills.tools",
    "sources.root",
    "summary.culture_highlights",
    "summary.headline",
    "summary.next_steps",
    "summary.value_proposition",
    "tasks.core",
    "tasks.secondary",
    "tasks.success_metrics",
    "team.collaboration_tools",
    "team.headcount_current",
    "team.headcount_target",
    "team.locations",
    "team.mission",
    "team.name",
    "team.reporting_line",
)

WIZARD_LIST_FIELDS: Final[tuple[WizardField, ...]] = (
    "benefits.perks",
    "benefits.wellbeing",
    "company.industries",
    "company.locations",
    "company.values",
    "department.strategic_goals",
    "interview_process.evaluation_criteria",
    "interview_process.interviewers",
    "interview_process.steps",
    "role.outcomes",
    "skills.certifications",
    "skills.languages",
    "skills.must_have",
    "skills.nice_to_have",
    "skills.tools",
    "summary.culture_highlights",
    "summary.next_steps",
    "tasks.core",
    "tasks.secondary",
    "tasks.success_metrics",
    "team.collaboration_tools",
    "team.locations",
)

WIZARD_FIELD_TYPES: Final[dict[WizardField, str]] = {
    "benefits.bonus": "str | None",
    "benefits.currency": "str | None",
    "benefits.equity": "str | None",
    "benefits.on_call": "core.schema.OnCallRequirement",
    "benefits.perks": "list[str]",
    "benefits.relocation_support": "str | None",
    "benefits.salary_range": "str | None",
    "benefits.wellbeing": "list[str]",
    "company.headquarters": "str | None",
    "company.industries": "list[str]",
    "company.legal_name": "str | None",
    "company.locations": "list[str]",
    "company.mission": "str | None",
    "company.name": "str | None",
    "company.tagline": "str | None",
    "company.values": "list[str]",
    "company.website": "str | None",
    "department.function": "str | None",
    "department.leader_name": "str | None",
    "department.leader_title": "str | None",
    "department.name": "str | None",
    "department.strategic_goals": "list[str]",
    "interview_process.decision_timeline": "str | None",
    "interview_process.evaluation_criteria": "list[str]",
    "interview_process.interviewers": "list[str]",
    "interview_process.notes": "str | None",
    "interview_process.steps": "list[str]",
    "missing_fields.root": "dict[str, core.schema.MissingFieldEntry]",
    "role.employment_type": "core.schema.EmploymentType",
    "role.on_call": "core.schema.OnCallRequirement",
    "role.outcomes": "list[str]",
    "role.purpose": "str | None",
    "role.reports_to": "str | None",
    "role.seniority": "str | None",
    "role.title": "str | None",
    "role.work_location": "str | None",
    "role.work_model": "core.schema.WorkModel",
    "skills.certifications": "list[str]",
    "skills.languages": "list[str]",
    "skills.must_have": "list[str]",
    "skills.nice_to_have": "list[str]",
    "skills.tools": "list[str]",
    "sources.root": "dict[str, core.schema.SourceAttribution]",
    "summary.culture_highlights": "list[str]",
    "summary.headline": "str | None",
    "summary.next_steps": "list[str]",
    "summary.value_proposition": "str | None",
    "tasks.core": "list[str]",
    "tasks.secondary": "list[str]",
    "tasks.success_metrics": "list[str]",
    "team.collaboration_tools": "list[str]",
    "team.headcount_current": "int | None",
    "team.headcount_target": "int | None",
    "team.locations": "list[str]",
    "team.mission": "str | None",
    "team.name": "str | None",
    "team.reporting_line": "str | None",
}

__all__ = ["WizardFieldInfo", "WizardField", "WIZARD_FIELDS", "WIZARD_FIELD_PATHS", "WIZARD_FIELD_TYPES", "WIZARD_LIST_FIELDS"]

